1. 文件存储注册数据，提供给client读写。

2. 注册和删除的数据，先存储到队列，然后后台线程异步将队列数据和数据库以及文件做同步

3. 每次新增，删除等操作会记录到db，然后集群中的每个实例都会有后天线程从XxlRegistryMessage表取数据同步本地文件数据

4. 集群环境，共享db

5. 从队列同步到硬盘的方式：
mysql，redis等也是这种方式。集群不同机器之间同步，可以利用数据库，也可以socket通信等。

zk，mysql，redis，xxl-registry等底层都是数据库文件系统的使用或硬盘指令的封装等

6. client获取的配置信息从xxl-registry的每台机子的本机磁盘的file上获取。zk也是这样。提高并发

总结：
1、轻量级：基于DB与磁盘文件，只需要提供一个DB实例即可，无第三方依赖；
2、实时性：借助内部广播机制，新服务上线、下线，可以在1s内推送给客户端；
3、数据同步：注册中心会定期全量同步数据至磁盘文件，清理无效服务，确保服务数据实时可用；
4、性能：服务发现时仅读磁盘文件，性能非常高；服务注册、摘除时通过磁盘文件校验，防止重复注册操作；
5、扩展性：可方便、快速的横向扩展，只需保证服务注册中心配置一致即可，可借助负载均衡组件如Nginx快速集群部署；
6、多状态：服务内置三种状态：
正常状态=支持动态注册、发现，服务注册信息实时更新；
锁定状态=人工维护注册信息，服务注册信息固定不变；
禁用状态=禁止使用，服务注册信息固定为空；
7、跨语言：注册中心提供HTTP接口（RESTFUL 格式）供客户端实用，语言无关，通用性更强；
8、兼容性：项目立项之初是为XXL-RPC量身设计，但是不限于XXL-RPC使用。兼容支持任何服务框架服务注册实用，如dubbo、springboot等；
9、跨机房：得益于服务注册中心集群关系对等特性，集群各节点提供幂等的配置服务；因此，异地跨机房部署时，只需要请求本机房服务注册中心即可，实现异地多活；
10、容器化：提供官方docker镜像，并实时更新推送dockerhub，进一步实现 "服务注册中心" 产品开箱即用；
11、访问令牌（accessToken）：为提升系统安全性，注册中心和客户端进行安全性校验，双方AccessToken匹配才允许通讯

DB用于存储注册数据和同步的消息数据。本地磁盘用于存储注册的数据给client用。本地磁盘存储数据的模式类似与redis，mysql的主从模式，但又不是主从。每个节点
即使主，又是从

本地磁盘中存储的properties文件中的数据是XxlRegistry,即包含了所有的XxlRegistryData数据。每次的discovery方法都是返回全量的数据给client。
client的registry，remove，都是先存储到队列中。然后后台线程异步处理，最终一致性。因为在内存中，宕机了就丢失数据了，高可用还是低了点

数据分片，主从，分库分表等思想都是空间换时间。数据最终一致性

数据用队列接受，线程异步处理，可以抗住高并发。削峰作用，将数据库，磁盘能抗住的并发和生产者的调用频率平衡好